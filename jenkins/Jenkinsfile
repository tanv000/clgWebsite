// -----------------------------------------------------------------------------
// Jenkins Pipeline for CI/CD of abc-college-web-app
// -----------------------------------------------------------------------------
pipeline {
    agent any

    environment {
        // AWS ECR Settings 
        AWS_REGION      = 'ap-south-1'
        AWS_ACCOUNT_ID  = '708972351530'
        ECR_REPOSITORY  = 'abc-college-web-app'
        IMAGE_TAG       = "latest"
        FULL_IMAGE_NAME = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"

        // EC2 Host Settings 
        WEB_APP_HOST_IP = '' // Will be set dynamically
        WEB_APP_HOST_USER = 'ec2-user'
        WEB_APP_HOST_SSH_CREDENTIAL_ID = 'WEB_APP_HOST_SSH' 
    }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout scm 
            }
        }

        stage('Build & Test (Optional)') {
            steps {
                bat 'echo "Skipping formal build/test for this project"'
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'AWS_ECR_CREDENTIALS', 
                            usernameVariable: 'AWS_ACCESS_KEY_ID', 
                            passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                        )
                    ]) {
                        
                        echo 'Authenticating Docker with ECR...'
                        // Uses bat for Windows agent
                        bat "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

                        echo "Building Docker image: ${FULL_IMAGE_NAME}"
                        // Uses bat for Windows agent
                        bat "docker build -t ${ECR_REPOSITORY} ."
                        
                        echo "Tagging image..."
                        // Uses bat for Windows agent
                        bat "docker tag ${ECR_REPOSITORY}:latest ${FULL_IMAGE_NAME}"

                        echo "Pushing image to ECR..."
                        // Uses bat for Windows agent
                        bat "docker push ${FULL_IMAGE_NAME}"
                    }
                }
            }
        }
        
        ## 🛠️ CRITICAL FIX 1: Ensure Terraform is Initialized to Read State
        stage('Terraform Init') {
            steps {
                script {
                    echo "Initializing Terraform backend..."
                    // Use 'bat' for the Windows agent
                    bat 'terraform init'
                }
            }
        }
        
        // CRITICAL FIX 2: Dynamically read the EC2 IP using Windows 'bat' and file I/O
        stage('Get Host IP') {
            steps {
                script {
                    // 1. Execute the Terraform command and redirect output to a file (Windows bat trick)
                    bat 'terraform output -raw web_app_public_ip > host_ip.txt'
                    
                    // 2. Read the content of the file into a Groovy variable
                    // This is necessary because 'bat' cannot return output directly to a variable like 'sh'
                    def host_ip = readFile('host_ip.txt').trim()

                    // 3. Set the environment variable
                    env.WEB_APP_HOST_IP = host_ip
                    
                    echo "✅ Retrieved dynamic host IP: ${env.WEB_APP_HOST_IP}"
                }
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                echo "Deploying to EC2 host: ${env.WEB_APP_HOST_IP}"
                
                // IMPORTANT: Ensure 'deploy.sh' exists in your Git repository and is committed.

                withCredentials([sshUserPrivateKey(
                    credentialsId: env.WEB_APP_HOST_SSH_CREDENTIAL_ID, 
                    keyFileVariable: 'SSH_KEY_PATH', 
                    usernameVariable: 'SSH_USER'
                )]) {
                    
                    // 1. SCP command to transfer the external deploy.sh script
                    // This relies on scp.exe/ssh.exe being in the Windows agent's PATH (usually via Git/Msys)
                    sh "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i \"${SSH_KEY_PATH}\" deploy.sh ${SSH_USER}@${env.WEB_APP_HOST_IP}:/home/${SSH_USER}/deploy.sh"

                    // 2. SSH command to execute the script on the remote (Linux) EC2 host
                    // We explicitly export the necessary environment variables for the remote script to run.
                    sh "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i \"${SSH_KEY_PATH}\" ${SSH_USER}@${env.WEB_APP_HOST_IP} 'bash -lc \"export AWS_REGION=${AWS_REGION} export AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID} export ECR_REPOSITORY=${ECR_REPOSITORY} && chmod +x /home/${SSH_USER}/deploy.sh && /home/${SSH_USER}/deploy.sh ${IMAGE_TAG}\"'"
                }
            }
        }
    }
}