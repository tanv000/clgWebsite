// -----------------------------------------------------------------------------
// Jenkins Pipeline for CI/CD of abc-college-web-app
// FIX: Deployment logic consolidated into a single remote SSH command.
// FIX: Ensures correct ECR login and container lifecycle on the EC2 host.
// -----------------------------------------------------------------------------
pipeline {
    agent any

    environment {
        // AWS ECR Settings 
        AWS_REGION      = 'ap-south-1'
        AWS_ACCOUNT_ID  = '708972351530'
        ECR_REPOSITORY  = 'abc-college-web-app'
        IMAGE_TAG       = "latest" 
        FULL_IMAGE_NAME = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"

        // EC2 Host Settings 
        WEB_APP_HOST_IP = '15.207.18.241'
        // CRITICAL: Ensure this user matches the user created by user_data (usually 'ec2-user')
        WEB_APP_HOST_USER = 'ec2-user' 
        // Credential ID for the SSH Key stored in Jenkins
        WEB_APP_HOST_SSH_CREDENTIAL_ID = 'WEB_APP_HOST_SSH' 
        // CRITICAL: Replace 'AWS_CREDENTIALS_ID' with the ID of your actual AWS Credentials (Access Key/Secret Key)
        AWS_CREDENTIALS_ID = 'AWS_Credentials_for_ECR_Push' 
    }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout scm 
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    echo "Building image: ${FULL_IMAGE_NAME}"
                    // Build the Docker image
                    sh "docker build -t ${FULL_IMAGE_NAME} ."
                    
                    // ECR Login and Push
                    withAWS(credentials: env.AWS_CREDENTIALS_ID, region: env.AWS_REGION) {
                        sh "aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com"
                        
                        // Push the image to ECR
                        sh "docker push ${FULL_IMAGE_NAME}"
                    }
                }
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                echo "Deploying to EC2 host: ${env.WEB_APP_HOST_IP}"
                
                // Inject the SSH Key path and username
                withCredentials([sshUserPrivateKey(
                    credentialsId: env.WEB_APP_HOST_SSH_CREDENTIAL_ID, 
                    keyFileVariable: 'SSH_KEY_PATH', 
                    usernameVariable: 'SSH_USER'
                )]) {

                    // Remote deployment script logic executed via SSH
                    def remoteCommand = """
                        #!/bin/bash
                        FULL_IMAGE_NAME="${env.FULL_IMAGE_NAME}"
                        CONTAINER_NAME="web-app-container"
                        ECR_REGISTRY="${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com"

                        echo "Starting deployment for \$FULL_IMAGE_NAME"

                        # 1. Log in to AWS ECR (using the EC2 instance's IAM role, which has AWS CLI installed by user_data)
                        echo "Logging into ECR..."
                        aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin \$ECR_REGISTRY

                        # 2. Stop and remove the old container
                        echo "Stopping and removing old container..."
                        # '|| true' ensures the pipeline doesn't fail if the container doesn't exist
                        docker stop \$CONTAINER_NAME || true
                        docker rm \$CONTAINER_NAME || true

                        # 3. Pull the latest image
                        echo "Pulling the new image..."
                        docker pull \$FULL_IMAGE_NAME

                        # 4. Run the new container
                        echo "Running the new container..."
                        docker run -d -p 80:80 --name \$CONTAINER_NAME \$FULL_IMAGE_NAME
                        
                        echo "Deployment finished."
                    """
                    
                    // Execute the remote command over SSH
                    // Use the temporary key file path (\${SSH_KEY_PATH}) provided by withCredentials
                    sh "ssh -i \"\${SSH_KEY_PATH}\" -o StrictHostKeyChecking=no \${SSH_USER}@${env.WEB_APP_HOST_IP} '${remoteCommand}'"
                }
            }
        }
    }
}
