pipeline {
    // Assuming the node label is configured correctly for your Windows agent
    agent any 

    // Define environment variables based on your ECR and EC2 setup
    environment {
        AWS_ACCOUNT_ID = '708972351530'
        AWS_REGION = 'ap-south-1'
        ECR_REPOSITORY = 'abc-college-web-app'
        IMAGE_NAME = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest"
        EC2_HOST = '15.207.18.241'
        CONTAINER_NAME = 'web-app'
    }

    stages {
        stage('SCM Checkout') {
            steps {
                echo "Cloning repository..."
                checkout scm
            }
        }

        stage('Build & Test (Optional)') {
            steps {
                // Using 'bat' for Windows shell execution
                bat 'echo "Skipping formal build/test for this project"'
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    // Assuming AWS credentials are provided via Jenkins Global Credentials (e.g., ID: 'aws-ecr-login')
                    withCredentials([
                        // Placeholder for your actual AWS credentials ID
                        usernamePassword(credentialsId: 'aws-ecr-login', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY') 
                    ]) {
                        echo "Authenticating Docker with ECR..."
                        // Using 'bat' for Windows execution. AWS CLI must be installed.
                        bat "aws ecr get-login-password --region %AWS_REGION% | docker login --username AWS --password-stdin %IMAGE_NAME:0:-7%" // Trims :latest for the registry URI
                        
                        echo "Building Docker image: %ECR_REPOSITORY%"
                        bat "docker build -t %ECR_REPOSITORY% ."
                        
                        echo "Tagging image..."
                        bat "docker tag %ECR_REPOSITORY%:latest %IMAGE_NAME%"
                        
                        echo "Pushing image to ECR..."
                        bat "docker push %IMAGE_NAME%"
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                echo "Deploying to EC2 host: %EC2_HOST%"
                // Assume the SSH key file credential ID is 'ec2-ssh-key'
                withCredentials([file(credentialsId: 'ec2-ssh-key', variable: 'SSH_KEY_PATH')]) {
                    // Deployment logic is now inline using 'bat'
                    bat '''
                        REM Ensure ssh is on the Windows agent's PATH.
                        echo "Starting remote deployment via SSH on %EC2_HOST%..."
                        
                        REM 1. Pull the latest image from ECR
                        ssh -i "%SSH_KEY_PATH%" ec2-user@%EC2_HOST% "docker pull %IMAGE_NAME%"
                        
                        REM 2. Stop and remove the old container
                        ssh -i "%SSH_KEY_PATH%" ec2-user@%EC2_HOST% "docker stop %CONTAINER_NAME% || true"
                        ssh -i "%SSH_KEY_PATH%" ec2-user@%EC2_HOST% "docker rm %CONTAINER_NAME% || true"
                        
                        REM 3. Run the new container, mapping port 80
                        ssh -i "%SSH_KEY_PATH%" ec2-user@%EC2_HOST% "docker run -d --name %CONTAINER_NAME% -p 80:80 %IMAGE_NAME%"
                        
                        echo "Deployment command sent successfully."
                    '''
                }
            }
        }
    }
}
