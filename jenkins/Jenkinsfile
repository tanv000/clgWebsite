// -----------------------------------------------------------------------------
// Jenkins Pipeline for CI/CD of abc-college-web-app
// REVISED: Using usernamePassword binding for robust AWS credential handling.
// -----------------------------------------------------------------------------
pipeline {
    agent any

    environment {
        // AWS ECR Settings (change to your specific values if they differ)
        AWS_REGION      = 'ap-south-1'
        AWS_ACCOUNT_ID  = '708972351530'
        ECR_REPOSITORY  = 'abc-college-web-app'
        IMAGE_TAG       = "latest"
        FULL_IMAGE_NAME = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"

        // EC2 Host Settings (change the IP to your public IP)
        WEB_APP_HOST_IP = '15.207.18.241'
        WEB_APP_HOST_USER = 'ec2-user'
        // Credential ID for the SSH Key stored in Jenkins (Username with private key)
        WEB_APP_HOST_SSH_CREDENTIAL_ID = 'WEB_APP_HOST_SSH' 
    }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout scm 
            }
        }

        stage('Build & Test (Optional)') {
            steps {
                sh 'echo "Skipping formal build/test for this project"'
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    // *** REVISED CREDENTIALS BINDING ***
                    // We use usernamePassword binding which is very reliable for binding
                    // 'AWS Credentials' type objects to standard environment variables.
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'AWS_ECR_CREDENTIALS', 
                            usernameVariable: 'AWS_ACCESS_KEY_ID', // Automatically sets environment variable
                            passwordVariable: 'AWS_SECRET_ACCESS_KEY' // Automatically sets environment variable
                        )
                    ]) {
                        
                        // 1. Authenticate Docker with ECR (AWS CLI reads environment variables automatically)
                        echo 'Authenticating Docker with ECR...'
                        sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

                        // 2. Build the Docker Image
                        echo "Building Docker image: ${FULL_IMAGE_NAME}"
                        sh "docker build -t ${ECR_REPOSITORY} ."
                        
                        // 3. Tag the image for ECR
                        echo "Tagging image..."
                        sh "docker tag ${ECR_REPOSITORY}:latest ${FULL_IMAGE_NAME}"

                        // 4. Push the image to ECR
                        echo "Pushing image to ECR..."
                        sh "docker push ${FULL_IMAGE_NAME}"
                    }
                }
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                echo "Deploying to EC2 host: ${WEB_APP_HOST_IP}"
                
                withCredentials([sshUserPrivateKey(
                    credentialsId: env.WEB_APP_HOST_SSH_CREDENTIAL_ID,
                    keyFileVariable: 'KEY_FILE',
                    usernameVariable: 'SSH_USER'
                )]) {
                    // Transfer the deploy script to the host (in case it changes)
                    sh "scp -i \${KEY_FILE} deploy.sh \${SSH_USER}@${WEB_APP_HOST_IP}:/home/${WEB_APP_HOST_USER}/deploy.sh"

                    // Execute the deployment script remotely
                    sh "ssh -i \${KEY_FILE} \${SSH_USER}@${WEB_APP_HOST_IP} 'sudo chmod +x /home/${WEB_APP_HOST_USER}/deploy.sh && /home/${WEB_APP_HOST_USER}/deploy.sh'"
                }
                echo "Deployment command sent successfully."
            }