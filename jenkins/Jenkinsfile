// -----------------------------------------------------------------------------
// Jenkins Pipeline for CI/CD of abc-college-web-app
// FIX: Corrected missing closing brace/curly bracket error for Groovy parser.
// FIX: Changed 'sh' to 'bat' for commands running on the Windows Jenkins agent.
// FIX: Replaced unstable 'sshagent' block with 'withCredentials' to fix the StringIndexOutOfBoundsException.
// -----------------------------------------------------------------------------
pipeline {
    agent any

    environment {
        // AWS ECR Settings 
        AWS_REGION      = 'ap-south-1'
        AWS_ACCOUNT_ID  = '708972351530'
        ECR_REPOSITORY  = 'abc-college-web-app'
        IMAGE_TAG       = "latest"
        FULL_IMAGE_NAME = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"

        // EC2 Host Settings 
        WEB_APP_HOST_IP = '15.207.18.241'
        WEB_APP_HOST_USER = 'ec2-user'
        // Credential ID for the SSH Key stored in Jenkins (Username with private key)
        WEB_APP_HOST_SSH_CREDENTIAL_ID = 'WEB_APP_HOST_SSH' 
    }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout scm 
            }
        }

        stage('Build & Test (Optional)') {
            steps {
                // CHANGED: Use 'bat' for Windows agent
                bat 'echo "Skipping formal build/test for this project"'
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'AWS_ECR_CREDENTIALS', 
                            usernameVariable: 'AWS_ACCESS_KEY_ID', 
                            passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                        )
                    ]) {
                        
                        // 1. Authenticate Docker with ECR
                        echo 'Authenticating Docker with ECR...'
                        // CHANGED: Use 'bat' for Windows agent
                        bat "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

                        // 2. Build the Docker Image
                        echo "Building Docker image: ${FULL_IMAGE_NAME}"
                        // CHANGED: Use 'bat' for Windows agent
                        bat "docker build -t ${ECR_REPOSITORY} ."
                        
                        // 3. Tag the image for ECR
                        echo "Tagging image..."
                        // CHANGED: Use 'bat' for Windows agent
                        bat "docker tag ${ECR_REPOSITORY}:latest ${FULL_IMAGE_NAME}"

                        // 4. Push the image to ECR
                        echo "Pushing image to ECR..."
                        // CHANGED: Use 'bat' for Windows agent
                        bat "docker push ${FULL_IMAGE_NAME}"
                    }
                }
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                echo "Deploying to EC2 host: ${env.WEB_APP_HOST_IP}"
                
                // --- FIX 1: WRITE deploy.sh TO WORKSPACE (This part is correct) ---
                script {
                    writeFile file: 'deploy.sh', text: """#!/bin/bash
# Jenkins will pass the IMAGE_TAG as the first argument (\$1)
IMAGE_TAG="\$1" 
IMAGE_REPO_URL="${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.ECR_REPOSITORY}"

# Log into ECR (assumes AWS CLI is installed and configured on the EC2 host)
\$(aws ecr get-login-password --region ${env.AWS_REGION}) | docker login --username AWS --password-stdin \$IMAGE_REPO_URL

# Stop and remove the old container
docker stop web-app-container || true
docker rm web-app-container || true

# Run the new container
docker run -d -p 80:80 --name web-app-container \$IMAGE_REPO_URL:\$IMAGE_TAG
"""
                }
                // ------------------------------------------

                withCredentials([sshUserPrivateKey(
                    credentialsId: env.WEB_APP_HOST_SSH_CREDENTIAL_ID, 
                    keyFileVariable: 'SSH_KEY_PATH', 
                    usernameVariable: 'SSH_USER'
                )]) {

                    // 1. Copy the deploy.sh script to the EC2 host
                    // Host Key Bypass is INLINED to be Declarative-compliant.
                    sh "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i \"${SSH_KEY_PATH}\" deploy.sh ${SSH_USER}@${env.WEB_APP_HOST_IP}:/home/${SSH_USER}/deploy.sh"

                    // 2. Execute the deployment script remotely
                    // FIX: Using 'bash -l -c' to load the environment (including Docker and AWS CLI path/creds).
                    sh "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i \"${SSH_KEY_PATH}\" ${SSH_USER}@${env.WEB_APP_HOST_IP} 'cd /home/${SSH_USER} && bash -l -c \"sudo chmod +x ./deploy.sh && ./deploy.sh ${IMAGE_TAG}\"'"
                }
        }
    }
}
