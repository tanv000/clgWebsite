// -----------------------------------------------------------------------------
// Jenkins Pipeline for CI/CD of abc-college-web-app
// -----------------------------------------------------------------------------
pipeline {
    agent any

    environment {
        // AWS ECR Settings 
        AWS_REGION      = 'ap-south-1'
        AWS_ACCOUNT_ID  = '708972351530'
        ECR_REPOSITORY  = 'abc-college-web-app'
        IMAGE_TAG       = "latest"
        FULL_IMAGE_NAME = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"

        // EC2 Host Settings 
        // WEB_APP_HOST_IP is now set dynamically in the 'Load Infra Details from SSM' stage.
        WEB_APP_HOST_USER = 'ec2-user'
        // Credential ID for the SSH Key stored in Jenkins (Username with private key)
        WEB_APP_HOST_SSH_CREDENTIAL_ID = 'WEB_APP_HOST_SSH' 
    }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout scm 
            }
        }
        
        // ðŸŸ¢ FINAL FIXED STAGE: Uses PowerShell to capture clean AWS CLI output
        stage('Load Infra Details from SSM') {
            steps {
                script {
                    // Use withCredentials for AWS CLI access
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'AWS_ECR_CREDENTIALS', 
                            usernameVariable: 'AWS_ACCESS_KEY_ID', 
                            passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                        )
                    ]) {
                        echo "Retrieving Host IP from SSM Parameter Store..."
                        
                        // FIX: Use 'powershell -command' inside 'bat' to execute the AWS CLI.
                        // PowerShell guarantees only the command output is returned, stripping the prompt text.
                        def ip_address_raw = bat(
                            script: 'powershell -command "aws ssm get-parameter --name /app/web/host-ip --region $env:AWS_REGION --query Parameter.Value --output text"',
                            returnStdout: true
                        ).trim()
                        
                        // Set the environment variable for subsequent stages
                        env.WEB_APP_HOST_IP = ip_address_raw
                        
                        echo "Dynamically loaded Host IP: ${env.WEB_APP_HOST_IP}"
                    }
                }
            }
        }
        // END FIXED STAGE

        stage('Build & Test (Optional)') {
            steps {
                // Using 'bat' for Windows agent
                bat 'echo "Skipping formal build/test for this project"'
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'AWS_ECR_CREDENTIALS', 
                            usernameVariable: 'AWS_ACCESS_KEY_ID', 
                            passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                        )
                    ]) {
                        
                        // 1. Authenticate Docker with ECR
                        echo 'Authenticating Docker with ECR...'
                        // Using 'bat' for Windows agent
                        bat "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

                        // 2. Build the Docker Image
                        echo "Building Docker image: ${FULL_IMAGE_NAME}"
                        // Using 'bat' for Windows agent
                        bat "docker build -t ${ECR_REPOSITORY} ."
                        
                        // 3. Tag the image for ECR
                        echo "Tagging image..."
                        // Using 'bat' for Windows agent
                        bat "docker tag ${ECR_REPOSITORY}:latest ${FULL_IMAGE_NAME}"

                        // 4. Push the image to ECR
                        echo "Pushing image to ECR..."
                        // Using 'bat' for Windows agent
                        bat "docker push ${FULL_IMAGE_NAME}"
                    }
                }
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                // This stage uses the now-clean ${env.WEB_APP_HOST_IP}
                echo "Deploying to EC2 host: ${env.WEB_APP_HOST_IP}"

                // 1. Create the deploy.sh script locally
                script {
                    writeFile file: 'deploy.sh', text: """#!/bin/bash
# Relying on fixed environment PATH and attached IAM Role
IMAGE_TAG="\$1" 
IMAGE_REPO_URL="${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.ECR_REPOSITORY}"

# Corrected ECR Login
aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin \$IMAGE_REPO_URL

# Stop and remove the old container
docker stop web-app-container || true
docker rm web-app-container || true

# Pull the latest image from ECR
docker pull \$IMAGE_REPO_URL:\$IMAGE_TAG

# Run the new container
docker run -d -p 80:80 --name web-app-container \$IMAGE_REPO_URL:\$IMAGE_TAG
"""
                }

                withCredentials([sshUserPrivateKey(
                    credentialsId: env.WEB_APP_HOST_SSH_CREDENTIAL_ID, 
                    keyFileVariable: 'SSH_KEY_PATH', 
                    usernameVariable: 'SSH_USER'
                )]) {
                    
                    // SCP command to transfer the script
                    sh "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i \"${SSH_KEY_PATH}\" deploy.sh ${SSH_USER}@${env.WEB_APP_HOST_IP}:/home/${SSH_USER}/deploy.sh"

                    // SSH command to execute the script
                    sh "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i \"${SSH_KEY_PATH}\" ${SSH_USER}@${env.WEB_APP_HOST_IP} 'bash -lc \"chmod +x /home/${SSH_USER}/deploy.sh && /home/${SSH_USER}/deploy.sh ${IMAGE_TAG}\"'"
                }
            }
        }
    }
}